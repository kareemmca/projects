command line commands
***************************
1. mongo
1. db.help()
2. show dbs
3. use datahub
4. db.user.find().pretty()
5. show collections 
6. update multiple records- db.user.update({},{$set: {contactNo: null}},{ multi: true })

*************************************************************************************************

1.mongoimport --db datahub --collection type --type csv --headerline --file type.csv

2.db.agent.remove({_id : ObjectId("568381d38a0067b2743144ba")});

3.db.agent.update({agentNationalId: 10012001},{$set: {agentType: "organization"}})
4.db.object.update({createdOn:"Tue Dec 29 12:38:42 IST 2015"},{$set: {observationMetadata: null}},{ multi: true });

5.db.agent.find()

6.db.agent.findOne()

7.db.agent.count()

8.db.agent.findOne({agentNationalId:10012001});

9.db.agent.findOne({agentNationalId:10012001});

10.db.agent.remove({agentNationalId:10012002});

11.db.organization.insert( { _class:"com.tcs.datahub.masterdata.agent.object.Organization", activeState: "true",agentId:"",organizationName:"City Of Chicago"} )

12.db.products.drop()


13.mongoimport --db datahub --collection observation --type csv --headerline --file Beach__Water_Temperature.csv


14.importing from dump
	d:/mongodb/bin mongorestore.exe --db datahub -path /p/databhub

15.db.books.update({ stock: { $lte: 10 } },{ $set: { reorder: true } },{ multi: true });

16.renaming column name in a table
	db.observation.update({}, {$rename:{"observationData":"observationValue"}}, false, true);

17.db.observation.update({objectUniqueId:1011a},{$set: {observationTimestamp: null}},{ multi: true });


18.Select specific columns from the table.
	db.object.find({},{name:1});


19.Exclude specific columns from the table.
	db.object.find({},{name:0});

20. eXPORT QUERY RESULT-
 mongoexport -d datahub -c observation --type=csv --fields objectUniqueId,observationValue,ObjectStatus,observationTime,activeState,locationId--out all_observations.csv --query "{\"locationId\": {\"\$exists\": \"true\"}}"

21. IMP- export and import should be run only in mongo-dats folder of ec2-user and not from mongo shell where queries are run


22. Importing all csvs from a folder 
for file in directoryName/*; do mongoimport --db datahub --collection observation --type csv --headerline --file "$file"; done   

23. and operator
 db.observation.find( {$and: [{ "objectUniqueId" : 1004},{observationDate:"30-Sep-2015"}]}).pretty();

24. Copying value of a column to another
db.observation.find( {"objectUniqueId:9_Kitchen"} ).forEach(function(doc) {
  db.observation.update({ _id: doc._id },{ $set: { observationData: doc.observationValue } } );
});

24. db.getCollection('building').find({}).sort({"_id":1})

25. import required collection
C:\Program Files\MongoDB\Server\3.2\bin>mongoimport --db datahub --collection observation --file D:\mongodbdump\dump\datahub\observation.json --type json --upsert

MongoDB on local

1)Open cmd. Go to the directory where your mongodb folder exists and go to a path like D:\MongoDB\bin. In the bin folder you should have mongod.exe

2)Now use


mongod --dbpath D:\shinedocuments\03ShineSeniors\datahub --storageEngine=mmapv1

mongod --port 27017 --dbpath "D:\MongoDB\data"





*****************************************************************************************
Initial Setup:
Go to mongodb bin folder in the cmd prompt (eg: C:\Program Files\MongoDB\Server\3.2\bin)
creat folder (C:\data\db)
1.Terminal 1: mongod --port 27017 --dbpath "C:\data\db"
2.Terminal 2: mongo
3.Terminal 3: mongorestore --db datahub -path D:\shinedocuments\03ShineSeniors\datahub
****************************************************************************************


show tables'


mongorestore --db datahub -path D:\shinedocuments\04Mongodump\shine


db.user.update({}, {$rename:{"username":"userName", "Name":"name","userDetails.address.Block":"userDetails.address.block","communitylist":"communityList"}}, false, true);

db.building.insert( { } )

{
    "_id" : "H001",
    "buildingType" : "HOUSE",
    "occupiedStatus" : "true",
    "residentlist" : [ 
        [ 
            "R001", 
            "Peter Sam"
        ]
    ],
    "activeStatus" : "true",
    "address" : {
        "unitNo" : "101",
        "Block" : "North",
        "street" : "Main Street",
        "city" : "Hyderabad",
        "country" : "India",
        "postalCode" : "500049"
    },
    "objectList" : { 
        [ 
            "GW001"
        ], 
        [ 
            "S001"
        ], 
        [ 
            "S002"
        ], 
        [ 
            "S003"
        ]
    },
    "buildingProperties" : {
        "DwellingEnabled" : "",
        "DwellingHours" : "",
        "EmptyFlatEnabled" : "",
        "EmptyFlatHours" : "",
        "BathroomsVisitEnabled" : "",
        "BathroomVisitHours" : ""
    },
    "userList" : [ 
        "U001"
    ],
    "communityList" : [ 
        "G001"
    ],
    "Remarks" : "Remarks for House H001",
    "createdBy" : "",
    "createdOn" : "",
    "updatedBy" : "",
    "updatedOn" : ""
}



db.building.remove({ "_id" : "H001"})




*********************************** Backup a Remote Mongodb Instance ********************************
mongodump --host 192.168.1.2 --port 37017 --db mongodevdb --username mongodevdb --password YourSecretPwd

mongodump --host 184.72.34.109 --port 27017 --db datahub --username ec2-user

local server: mongodump




mongorestore --db datahub -path D:\backup\dump\datahub




***************Linux commands****************************
zip -r datahub16082016 /home/ec2-user/dump/datahub



*************************

https://blog.ajduke.in/2013/04/10/install-setup-and-start-mongodb-on-windows/

open command promt:
1) go to bin folder
2) execute mongod.exe

ex:
3)mongod --dbpath C:/data/db --port 27017 --logpath=C:/mongodb/log/mongo.log 



example
#This is an example config file for MongoDB basic
dbpath = I:\Servers\mongodb\data
port = 27017
logpath = I:\Servers\mongodb\logs\mongo.log



commands:

1) mongo db
2) user datahub
3) db.person.find({_id:objectId("345634gfsdg")})
****************************
find records with criteria

1) db.userAssociation.find({"associatedId": "H063","associatedId": "H062","associatedId": "R001","associatedId": "R100","associatedId": "R101"})
2) db.userAssociation.find({
    "associatedId":  {
        "$in": ["H063", "R003","H062", "R100","R101"] 
    }
}).count();

db.alertRuleAssociation.find({
    "associatedId":  {
        "$in": ["H063","H062"] 
    }});
	
db.alertRuleAssociation.find({
    "taggedAgentIds":  {
        "$in": ["R001"] 
    }});	
	
	
db.observation.aggregate(
    [
     { $sort: { _id: 1 } },
    {  
        $group:
         {
           _id: "$objectId"
          
         }
     }]
   );

observation Activity last seen query: 
 db.observation.find({ "observationValue" : "Yes"}).sort({"_id":-1})
 
   
@Component
public class PersonOrganizationAggregation implements AggregationStrategy{

	private final Logger logger = Logger.getLogger(this.getClass());

	@Autowired
	private ObjectMapper objectMapper;

	@Override
	public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
		logger.info("Agent aggregate function started");

		List<Map<String,Object>> agents = new ArrayList<Map<String,Object>>();
		
		Map<String,Object> response = new HashMap<String,Object>();

		try{
			if(oldExchange != null){
				agents.addAll( (List<? extends Map<String, Object>>) objectMapper.readValue( oldExchange.getIn().getBody(String.class), Map.class).get("object"));
				agents.addAll( (List<? extends Map<String, Object>>) objectMapper.readValue( newExchange.getIn().getBody(String.class), Map.class).get("object"));
				response.put("status", "success");
				response.put("object", agents);
				newExchange.getIn().setBody( objectMapper.writeValueAsString( response));						
			}				
			
		}

		catch(Exception e){
			logger.error("Exception encounter in Agent aggregate function : "+ Helpers.getStackTrace(e));
			e.printStackTrace();
		}
		logger.info("Agent aggregate function ended");
		return newExchange;
	}

}

queries

db.getCollection('building').find({"residentList.residentId" : {"$in" : ["R001"], "$exists" : true}});

